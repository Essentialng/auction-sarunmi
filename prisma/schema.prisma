generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @default(uuid()) @id
  firstName           String
  lastName            String
  email               String    @unique 
  password            String
  phoneNumber         String    @unique 
  address             String?
  state               String?
  nin                 String?
  profilePicture      String?
  type                String
  cashBalance         Float     @default(0.00)
  subscriptionType    String?
  verifiedSubscription  Boolean @default(false)
  items               Item[]
  itemSold            ItemSold[]
  notifications     Notification[] @relation("notification") 
  lastLogin           DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  watchlist         Watchlist[] @relation("UserWatchlist")
  bids              Bid[] @relation("UserBids")
  admin             Admin[] @relation("AdminUser")
}


model Category {
  id          Int         @id @default(autoincrement())
  name        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  model       Model[]
  Field       Field[]
  conditionForm   ConditionForms[]
}

model Model {
  id          Int         @id @default(autoincrement())
  categoryId  Int
  name        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  items       Item[]
  category    Category    @relation(fields: [categoryId],  references: [id])
}

model Item {
  id          Int         @id @default(autoincrement())
  userId      String
  modelId     Int
  name        String
  images      String[]
  description String
  location    String
  price       Int?
  payOff      Int?
  details     Json
  startTime   String?
  endTime     String?
  report      String?
  status      String     
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  model       Model    @relation(fields: [modelId],  references: [id])
  watchlist   Watchlist[]
  itemSold    ItemSold[]
  bids        Bid[]
  notification Notification[]
  condition   Conditions[]
  user        User     @relation( fields: [userId], references: [id])

  
}


model Conditions{
  id          Int         @id @default(autoincrement())
  itemId      Int
  condition   Json
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  item        Item    @relation(fields: [itemId], references: [id])
}


model ConditionForms{
  id          Int         @id @default(autoincrement())
  categoryId  Int
  details     Json
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  category    Category    @relation(fields: [categoryId], references: [id])

}

model Field {
  id          Int         @id @default(autoincrement())
  categoryId  Int
  label       String
  value       String
  placeholder String     
  dataType    String      
  required    Boolean     @default(false)
  options     Json?    
  category    Category    @relation(fields: [categoryId], references: [id])
}


model Watchlist {
  id            Int   @id @default(autoincrement())
  userId        String
  itemId        Int
  user          User     @relation("UserWatchlist", fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  item          Item     @relation(fields: [itemId], references: [id])

}

model Bid {
  id            Int   @id @default(autoincrement())
  userId        String
  itemId        Int
  amount        Int
  status        String @default("pending")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation("UserBids", fields: [userId], references: [id])
  item          Item     @relation(fields: [itemId], references: [id])
  itemSold      ItemSold[]
}


model ItemSold {
  id          Int       @id @default(autoincrement())
  bidId       Int
  itemId      Int
  ownerId     String
  bidderId    String
  soldPrice   Int
  paymentAmount          Int?
  paymentStatus   String?
  paymentDate     DateTime?  @updatedAt
  soldAt      DateTime  @default(now())
  bid         Bid      @relation(fields: [bidId], references: [id])
  item        Item      @relation(fields: [itemId], references: [id])
  bidder      User      @relation(fields: [bidderId], references: [id])
}



model Notification {
  id          Int       @id @default(autoincrement())
  userId      String
  itemId      Int 
  message     String
  type        String  
  createdAt   DateTime  @default(now())
  user        User      @relation("notification", fields: [userId], references: [id])
  item        Item      @relation(fields: [itemId], references: [id])
  readBy      String[]  @default([]) 
  deletedBy   String[]  @default([]) 
}


model Admin {
  id          String   @id @default(uuid())
  userId      String
  role        String   
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation("AdminUser", fields: [userId], references: [id])
}
