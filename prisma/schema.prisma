generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @default(uuid()) @id
  firstName           String
  lastName            String
  email               String    @unique 
  password            String
  phoneNumber         String    @unique 
  state               String?
  nin                 String?
  profilePicture      String?
  type                String
  cashBalance         Float     @default(0.00)
  // orders            Order[]    @relation("UserOrders")
  notifications     Notification[] @relation("notification") 
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  watchlist         Watchlist[] @relation("UserWatchlist")
  bids              Bid[] @relation("UserBids")
  admin             Admin[] @relation("AdminUser")
}


model Category {
  id          Int         @id @default(autoincrement())
  name        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  model       Model[]
  Field       Field[]
}

model Model {
  id          Int         @id @default(autoincrement())
  categoryId  Int
  name        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  items       Item[]
  category    Category    @relation(fields: [categoryId],  references: [id])
}

model Item {
  id          Int         @id @default(autoincrement())
  userId      String
  modelId     Int
  name        String
  images      String[]
  description String
  location    String
  price       Int
  details     Json
  startTime   String
  endTime     String
  status      String      // For example: "listed", "sold", "auctioned"
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  model       Model    @relation(fields: [modelId],  references: [id])
  watchlist   Watchlist[]
  bids        Bid[]
}

model Field {
  id          Int         @id @default(autoincrement())
  categoryId  Int
  label       String
  value       String
  placeholder String     
  dataType    String      // For example: "text", "number", "file", etc.
  required    Boolean     @default(false)
  options     String?     // If dropdown options are needed (comma-separated values)
  category    Category    @relation(fields: [categoryId], references: [id])
}



// model Order {
//   id            Int      @id @default(autoincrement())
//   userId        String  
//   itemId        String
//   totalPrice    Float    
//   status        String   @default("pending") 
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt
//   user          User     @relation("UserOrders", fields: [userId], references: [id])
// }

model Watchlist {
  id            Int   @id @default(autoincrement())
  userId        String
  itemId        Int
  user          User     @relation("UserWatchlist", fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  item          Item     @relation(fields: [itemId], references: [id])

}

model Bid {
  id            Int   @id @default(autoincrement())
  userId        String
  itemId        Int
  amount        Int
  status        String @default("pending")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation("UserBids", fields: [userId], references: [id])
  item          Item     @relation(fields: [itemId], references: [id])

}

model Notification {
  id          Int      @id @default(autoincrement())
  userId      String
  message     String
  type        String   // For example: "BidOutbid", "AuctionEnd"
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  user        User     @relation("notification", fields: [userId], references: [id])
}

model Admin {
  id          String   @id @default(uuid())
  userId      String
  role        String   // For example: "admin", "moderator"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation("AdminUser", fields: [userId], references: [id])
}
