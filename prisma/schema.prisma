generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @default(uuid()) @id
  firstName           String
  lastName            String
  email               String    @unique 
  password            String
  phoneNumber         String    @unique 
  state               String?
  nin                 String?
  profilePicture      String?
  type                String
  cashBalance         Float     @default(0.00)
  orders            Order[]    @relation("UserOrders")
  notifications     Notification[] @relation("notification") 
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  watchlist         Watchlist[] @relation("UserWatchlist")
  bids              Bid[] @relation("UserBids")
}

model Category {
  id          Int         @id @default(autoincrement())
  name        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  items       Item[]
}

model Item {
  id          Int         @id @default(autoincrement())
  userId      String
  categoryId  Int
  name        String
  description String
  location    String
  price       Float
  status      String      // For example: "listed", "sold", "auctioned"
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  attributes  Attribute[] @relation("Attribute")
  category    Category    @relation(fields: [categoryId], references: [id])
}

model Attribute {
  id          Int         @id @default(autoincrement())
  itemId      Int
  label       String
  value       String
  dataType    String      // For example: "text", "number", "file", etc.
  required    Boolean     @default(false)
  options     String?     // If dropdown options are needed (comma-separated values)
  item        Item    @relation("Attribute", fields: [itemId], references: [id])
}



model Order {
  id            Int      @id @default(autoincrement())
  userId        String  
  itemId        String
  quantity      Int      @default(1)
  totalPrice    Float    
  status        String   @default("Pending") 
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation("UserOrders", fields: [userId], references: [id])
}

model Watchlist {
  id            String   @default(uuid()) @id
  userId        String
  itemId        String
  user          User     @relation("UserWatchlist", fields: [userId], references: [id])
  createdAt     DateTime @default(now())
}

model Bid {
  id            String   @default(uuid()) @id
  userId        String
  amount        Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation("UserBids", fields: [userId], references: [id])
}

model Notification {
  id          Int      @id @default(autoincrement())
  userId      String
  message     String
  read        Boolean  @default(false)
  user        User     @relation("notification", fields: [userId], references: [id])
  createdAt   DateTime @default(now())
}