generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @default(uuid()) @id
  firstName           String
  lastName            String
  email               String    @unique 
  password            String
  phoneNumber         String    @unique 
  state               String?
  nin                 String?
  profilePicture      String?
  type                String
  cashBalance         Float     @default(0.00)
  orders            Order[]    @relation("UserOrders") 
  car               Car[] @relation("Cars")
  property          Property[] @relation("Properties")
  other             Other[] @relation("Other")
  notifications     Notification[] @relation("notification") 
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  watchlist         Watchlist[] @relation("UserWatchlist")
  bids              Bid[] @relation("UserBids")
}

model Car {
  id                    String   @default(uuid()) @id
  userId                String
  image                 String[]
  description           String
  vin                   String
  color                 String
  fuel                  String
  lotNumber             String
  location              String
  yearsUsed             String
  primaryDamage         String
  oldMeter              String
  proofOfOwnership      String
  user                 User     @relation("Cars", fields: [userId], references: [id]) 
  status                String
  createdAt             DateTime @default(now())
  expireDate            DateTime?
}

model Property {
  id                    String   @default(uuid()) @id
  userId                String
  productName           String
  image                 String[]
  description           String
  productType           String  
  location              String
  user                 User     @relation("Properties", fields: [userId], references: [id]) 
  status                String
  createdAt             DateTime @default(now())
  expireDate            DateTime?
}

model Other {
  id                  String @default(uuid()) @id
  userId              String
  productName         String
  image               String[]
  features            Json
  user               User     @relation("Other", fields: [userId], references: [id]) 
  status               String
  createdAt            DateTime @default(now())
  expireDate           DateTime?
}

model Order {
  id            Int      @id @default(autoincrement())
  userId        String  
  itemId        String
  quantity      Int      @default(1)
  totalPrice    Float    
  status        String   @default("Pending") 
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation("UserOrders", fields: [userId], references: [id])
}

model Watchlist {
  id            String   @default(uuid()) @id
  userId        String
  itemId        String
  user          User     @relation("UserWatchlist", fields: [userId], references: [id])
  createdAt     DateTime @default(now())
}

model Bid {
  id            String   @default(uuid()) @id
  userId        String
  amount        Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation("UserBids", fields: [userId], references: [id])
}

model Notification {
  id          Int      @id @default(autoincrement())
  userId      String
  message     String
  read        Boolean  @default(false)
  user        User     @relation("notification", fields: [userId], references: [id])
  createdAt   DateTime @default(now())
}